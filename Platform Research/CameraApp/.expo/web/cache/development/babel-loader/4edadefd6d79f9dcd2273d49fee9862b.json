{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport { useWorker } from '@koale/useworker';\nimport * as React from 'react';\nimport { captureImageData } from \"./WebCameraUtils\";\n\nvar qrWorkerMethod = function qrWorkerMethod(_ref) {\n  var _parsed;\n\n  var data = _ref.data,\n      width = _ref.width,\n      height = _ref.height;\n  var decoded = self.jsQR(data, width, height, {\n    inversionAttempts: 'attemptBoth'\n  });\n  var parsed;\n\n  try {\n    parsed = JSON.parse(decoded);\n  } catch (_unused) {\n    parsed = decoded;\n  }\n\n  if ((_parsed = parsed) != null && _parsed.data) {\n    var nativeEvent = {\n      type: 'qr',\n      data: parsed.data\n    };\n\n    if (parsed.location) {\n      nativeEvent.cornerPoints = [parsed.location.topLeftCorner, parsed.location.bottomLeftCorner, parsed.location.topRightCorner, parsed.location.bottomRightCorner];\n    }\n\n    return nativeEvent;\n  }\n\n  return parsed;\n};\n\nfunction useRemoteJsQR() {\n  return useWorker(qrWorkerMethod, {\n    remoteDependencies: ['https://cdn.jsdelivr.net/npm/jsqr@1.2.0/dist/jsQR.min.js'],\n    autoTerminate: false\n  });\n}\n\nexport function useWebQRScanner(video, _ref2) {\n  var isEnabled = _ref2.isEnabled,\n      captureOptions = _ref2.captureOptions,\n      interval = _ref2.interval,\n      onScanned = _ref2.onScanned,\n      onError = _ref2.onError;\n  var isRunning = React.useRef(false);\n  var timeout = React.useRef(undefined);\n\n  var _useRemoteJsQR = useRemoteJsQR(),\n      _useRemoteJsQR2 = _slicedToArray(_useRemoteJsQR, 2),\n      decode = _useRemoteJsQR2[0],\n      clearWorker = _useRemoteJsQR2[1];\n\n  function scanAsync() {\n    return _scanAsync.apply(this, arguments);\n  }\n\n  function _scanAsync() {\n    _scanAsync = _asyncToGenerator(function* () {\n      if (!isRunning.current || !onScanned) {\n        stop();\n        return;\n      }\n\n      try {\n        var data = captureImageData(video.current, captureOptions);\n\n        if (data) {\n          var nativeEvent = yield decode(data);\n\n          if (nativeEvent != null && nativeEvent.data) {\n            onScanned({\n              nativeEvent: nativeEvent\n            });\n          }\n        }\n      } catch (error) {\n        if (onError) {\n          onError({\n            nativeEvent: error\n          });\n        }\n      } finally {\n        if (interval === 0) {\n          stop();\n          return;\n        }\n\n        var intervalToUse = !interval || interval < 0 ? 16 : interval;\n        timeout.current = setTimeout(function () {\n          scanAsync();\n        }, intervalToUse);\n      }\n    });\n    return _scanAsync.apply(this, arguments);\n  }\n\n  function stop() {\n    isRunning.current = false;\n    clearTimeout(timeout.current);\n  }\n\n  React.useEffect(function () {\n    if (isEnabled) {\n      isRunning.current = true;\n      scanAsync();\n    } else {\n      stop();\n    }\n  }, [isEnabled]);\n  React.useEffect(function () {\n    return function () {\n      stop();\n      clearWorker.kill();\n    };\n  }, []);\n}","map":{"version":3,"sources":["../src/useWebQRScanner.ts"],"names":[],"mappings":"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","sourcesContent":["import { useWorker } from '@koale/useworker';\nimport * as React from 'react';\n\nimport { BarCodeScanningResult, CameraPictureOptions, MountErrorListener } from './Camera.types';\nimport { captureImageData } from './WebCameraUtils';\n\nconst qrWorkerMethod = ({ data, width, height }: ImageData): any => {\n  // eslint-disable-next-line no-undef\n  const decoded = (self as any).jsQR(data, width, height, {\n    inversionAttempts: 'attemptBoth',\n  });\n\n  let parsed;\n  try {\n    parsed = JSON.parse(decoded);\n  } catch {\n    parsed = decoded;\n  }\n\n  if (parsed?.data) {\n    const nativeEvent: BarCodeScanningResult = {\n      type: 'qr',\n      data: parsed.data,\n    };\n    if (parsed.location) {\n      nativeEvent.cornerPoints = [\n        parsed.location.topLeftCorner,\n        parsed.location.bottomLeftCorner,\n        parsed.location.topRightCorner,\n        parsed.location.bottomRightCorner,\n      ];\n    }\n    return nativeEvent;\n  }\n  return parsed;\n};\n\nfunction useRemoteJsQR() {\n  return useWorker(qrWorkerMethod, {\n    remoteDependencies: ['https://cdn.jsdelivr.net/npm/jsqr@1.2.0/dist/jsQR.min.js'],\n    autoTerminate: false,\n  });\n}\n\nexport function useWebQRScanner(\n  video: React.MutableRefObject<HTMLVideoElement | null>,\n  {\n    isEnabled,\n    captureOptions,\n    interval,\n    onScanned,\n    onError,\n  }: {\n    isEnabled: boolean;\n    captureOptions: Pick<CameraPictureOptions, 'scale' | 'isImageMirror'>;\n    interval?: number;\n    onScanned?: (scanningResult: { nativeEvent: BarCodeScanningResult }) => void;\n    onError?: MountErrorListener;\n  }\n) {\n  const isRunning = React.useRef<boolean>(false);\n  const timeout = React.useRef<number | undefined>(undefined);\n\n  const [decode, clearWorker] = useRemoteJsQR();\n\n  async function scanAsync() {\n    // If interval is 0 then only scan once.\n    if (!isRunning.current || !onScanned) {\n      stop();\n      return;\n    }\n    try {\n      const data = captureImageData(video.current, captureOptions);\n\n      if (data) {\n        const nativeEvent: BarCodeScanningResult | any = await decode(data);\n        if (nativeEvent?.data) {\n          onScanned({\n            nativeEvent,\n          });\n        }\n      }\n    } catch (error) {\n      if (onError) {\n        onError({ nativeEvent: error });\n      }\n    } finally {\n      // If interval is 0 then only scan once.\n      if (interval === 0) {\n        stop();\n        return;\n      }\n      const intervalToUse = !interval || interval < 0 ? 16 : interval;\n      // @ts-ignore: Type 'Timeout' is not assignable to type 'number'\n      timeout.current = setTimeout(() => {\n        scanAsync();\n      }, intervalToUse);\n    }\n  }\n\n  function stop() {\n    isRunning.current = false;\n    clearTimeout(timeout.current);\n  }\n\n  React.useEffect(() => {\n    if (isEnabled) {\n      isRunning.current = true;\n      scanAsync();\n    } else {\n      stop();\n    }\n  }, [isEnabled]);\n\n  React.useEffect(() => {\n    return () => {\n      stop();\n      clearWorker.kill();\n    };\n  }, []);\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}