{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport { EventEmitter, Platform, UnavailabilityError } from 'expo-modules-core';\nimport { PlaybackMixin, assertStatusValuesInBounds, getNativeSourceAndFullInitialStatusForLoadAsync, getUnloadedStatus } from \"../AV\";\nimport ExponentAV from \"../ExponentAV\";\nimport { throwIfAudioIsDisabled } from \"./AudioAvailability\";\nexport var Sound = function () {\n  function Sound() {\n    var _this = this;\n\n    _classCallCheck(this, Sound);\n\n    this._loaded = false;\n    this._loading = false;\n    this._key = null;\n    this._lastStatusUpdate = null;\n    this._lastStatusUpdateTime = null;\n    this._subscriptions = [];\n    this._eventEmitter = new EventEmitter(ExponentAV);\n    this._coalesceStatusUpdatesInMillis = 100;\n    this._onPlaybackStatusUpdate = null;\n    this._onMetadataUpdate = null;\n    this._onAudioSampleReceived = null;\n\n    this._internalStatusUpdateCallback = function (_ref) {\n      var key = _ref.key,\n          status = _ref.status;\n\n      if (_this._key === key) {\n        _this._callOnPlaybackStatusUpdateForNewStatus(status);\n      }\n    };\n\n    this._internalMetadataUpdateCallback = function (_ref2) {\n      var key = _ref2.key,\n          metadata = _ref2.metadata;\n\n      if (_this._key === key) {\n        _this._onMetadataUpdate == null ? void 0 : _this._onMetadataUpdate(metadata);\n      }\n    };\n\n    this._internalErrorCallback = function (_ref3) {\n      var key = _ref3.key,\n          error = _ref3.error;\n\n      if (_this._key === key) {\n        _this._errorCallback(error);\n      }\n    };\n\n    this._errorCallback = function (error) {\n      _this._clearSubscriptions();\n\n      _this._loaded = false;\n      _this._key = null;\n\n      _this._callOnPlaybackStatusUpdateForNewStatus(getUnloadedStatus(error));\n    };\n\n    this.getStatusAsync = _asyncToGenerator(function* () {\n      if (_this._loaded) {\n        return _this._performOperationAndHandleStatusAsync(function () {\n          return ExponentAV.getStatusForSound(_this._key);\n        });\n      }\n\n      var status = getUnloadedStatus();\n\n      _this._callOnPlaybackStatusUpdateForNewStatus(status);\n\n      return status;\n    });\n  }\n\n  _createClass(Sound, [{\n    key: \"_callOnPlaybackStatusUpdateForNewStatus\",\n    value: function _callOnPlaybackStatusUpdateForNewStatus(status) {\n      var shouldDismissBasedOnCoalescing = this._lastStatusUpdateTime && JSON.stringify(status) === this._lastStatusUpdate && Date.now() - this._lastStatusUpdateTime.getTime() < this._coalesceStatusUpdatesInMillis;\n\n      if (this._onPlaybackStatusUpdate != null && !shouldDismissBasedOnCoalescing) {\n        this._onPlaybackStatusUpdate(status);\n\n        this._lastStatusUpdateTime = new Date();\n        this._lastStatusUpdate = JSON.stringify(status);\n      }\n    }\n  }, {\n    key: \"_performOperationAndHandleStatusAsync\",\n    value: function () {\n      var _performOperationAndHandleStatusAsync2 = _asyncToGenerator(function* (operation) {\n        throwIfAudioIsDisabled();\n\n        if (this._loaded) {\n          var status = yield operation();\n\n          this._callOnPlaybackStatusUpdateForNewStatus(status);\n\n          return status;\n        } else {\n          throw new Error('Cannot complete operation because sound is not loaded.');\n        }\n      });\n\n      function _performOperationAndHandleStatusAsync(_x) {\n        return _performOperationAndHandleStatusAsync2.apply(this, arguments);\n      }\n\n      return _performOperationAndHandleStatusAsync;\n    }()\n  }, {\n    key: \"_updateAudioSampleReceivedCallback\",\n    value: function _updateAudioSampleReceivedCallback() {\n      if (global.__EXAV_setOnAudioSampleReceivedCallback == null) {\n        if (Platform.OS === 'ios' || Platform.OS === 'android') {\n          console.warn('expo-av: Failed to set up Audio Sample Buffer callback. ' + \"Do you have 'Remote Debugging' enabled in your app's Developer Menu (https://docs.expo.dev/workflow/debugging)? \" + 'Audio Sample Buffer callbacks are not supported while using Remote Debugging, you will need to disable it to use them.');\n          return;\n        } else {\n          throw new UnavailabilityError('expo-av', 'setOnAudioSampleReceived');\n        }\n      }\n\n      if (this._key == null) {\n        throw new Error('Cannot set Audio Sample Buffer callback when the Sound instance has not been successfully loaded/initialized!');\n      }\n\n      if (typeof this._key !== 'number') {\n        throw new Error(\"Cannot set Audio Sample Buffer callback when Sound instance key is of type \" + typeof this._key + \"! (expected: number)\");\n      }\n\n      global.__EXAV_setOnAudioSampleReceivedCallback(this._key, this._onAudioSampleReceived);\n    }\n  }, {\n    key: \"_subscribeToNativeEvents\",\n    value: function _subscribeToNativeEvents() {\n      if (this._loaded) {\n        this._subscriptions.push(this._eventEmitter.addListener('didUpdatePlaybackStatus', this._internalStatusUpdateCallback), this._eventEmitter.addListener('didUpdateMetadata', this._internalMetadataUpdateCallback));\n\n        this._subscriptions.push(this._eventEmitter.addListener('ExponentAV.onError', this._internalErrorCallback));\n      }\n    }\n  }, {\n    key: \"_clearSubscriptions\",\n    value: function _clearSubscriptions() {\n      this._subscriptions.forEach(function (e) {\n        return e.remove();\n      });\n\n      this._subscriptions = [];\n    }\n  }, {\n    key: \"setOnPlaybackStatusUpdate\",\n    value: function setOnPlaybackStatusUpdate(onPlaybackStatusUpdate) {\n      this._onPlaybackStatusUpdate = onPlaybackStatusUpdate;\n      this.getStatusAsync();\n    }\n  }, {\n    key: \"setOnMetadataUpdate\",\n    value: function setOnMetadataUpdate(onMetadataUpdate) {\n      this._onMetadataUpdate = onMetadataUpdate;\n    }\n  }, {\n    key: \"setOnAudioSampleReceived\",\n    value: function setOnAudioSampleReceived(callback) {\n      this._onAudioSampleReceived = callback;\n\n      if (this._key != null) {\n        this._updateAudioSampleReceivedCallback();\n      }\n    }\n  }, {\n    key: \"loadAsync\",\n    value: function () {\n      var _loadAsync = _asyncToGenerator(function* (source) {\n        var _this2 = this;\n\n        var initialStatus = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n        var downloadFirst = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n        throwIfAudioIsDisabled();\n\n        if (this._loading) {\n          throw new Error('The Sound is already loading.');\n        }\n\n        if (!this._loaded) {\n          this._loading = true;\n\n          var _yield$getNativeSourc = yield getNativeSourceAndFullInitialStatusForLoadAsync(source, initialStatus, downloadFirst),\n              nativeSource = _yield$getNativeSourc.nativeSource,\n              fullInitialStatus = _yield$getNativeSourc.fullInitialStatus;\n\n          return new Promise(function (resolve, reject) {\n            var loadSuccess = function loadSuccess(result) {\n              var _result = _slicedToArray(result, 2),\n                  key = _result[0],\n                  status = _result[1];\n\n              _this2._key = key;\n              _this2._loaded = true;\n              _this2._loading = false;\n\n              _this2._subscribeToNativeEvents();\n\n              _this2._callOnPlaybackStatusUpdateForNewStatus(status);\n\n              resolve(status);\n            };\n\n            var loadError = function loadError(error) {\n              _this2._loading = false;\n              reject(error);\n            };\n\n            ExponentAV.loadForSound(nativeSource, fullInitialStatus).then(loadSuccess).catch(loadError);\n          });\n        } else {\n          throw new Error('The Sound is already loaded.');\n        }\n      });\n\n      function loadAsync(_x2) {\n        return _loadAsync.apply(this, arguments);\n      }\n\n      return loadAsync;\n    }()\n  }, {\n    key: \"unloadAsync\",\n    value: function () {\n      var _unloadAsync = _asyncToGenerator(function* () {\n        if (this._loaded) {\n          this._loaded = false;\n          var key = this._key;\n          this._key = null;\n          var status = yield ExponentAV.unloadForSound(key);\n\n          this._callOnPlaybackStatusUpdateForNewStatus(status);\n\n          this._clearSubscriptions();\n\n          return status;\n        } else {\n          return this.getStatusAsync();\n        }\n      });\n\n      function unloadAsync() {\n        return _unloadAsync.apply(this, arguments);\n      }\n\n      return unloadAsync;\n    }()\n  }, {\n    key: \"setStatusAsync\",\n    value: function () {\n      var _setStatusAsync = _asyncToGenerator(function* (status) {\n        var _this3 = this;\n\n        assertStatusValuesInBounds(status);\n        return this._performOperationAndHandleStatusAsync(function () {\n          return ExponentAV.setStatusForSound(_this3._key, status);\n        });\n      });\n\n      function setStatusAsync(_x3) {\n        return _setStatusAsync.apply(this, arguments);\n      }\n\n      return setStatusAsync;\n    }()\n  }, {\n    key: \"replayAsync\",\n    value: function () {\n      var _replayAsync = _asyncToGenerator(function* () {\n        var _this4 = this;\n\n        var status = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n        if (status.positionMillis && status.positionMillis !== 0) {\n          throw new Error('Requested position after replay has to be 0.');\n        }\n\n        return this._performOperationAndHandleStatusAsync(function () {\n          return ExponentAV.replaySound(_this4._key, _objectSpread(_objectSpread({}, status), {}, {\n            positionMillis: 0,\n            shouldPlay: true\n          }));\n        });\n      });\n\n      function replayAsync() {\n        return _replayAsync.apply(this, arguments);\n      }\n\n      return replayAsync;\n    }()\n  }]);\n\n  return Sound;\n}();\n\nSound.create = function () {\n  var _ref5 = _asyncToGenerator(function* (source) {\n    var initialStatus = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var onPlaybackStatusUpdate = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n    var downloadFirst = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;\n    console.warn(\"Sound.create is deprecated in favor of Sound.createAsync with the same API except for the new method name\");\n    return Sound.createAsync(source, initialStatus, onPlaybackStatusUpdate, downloadFirst);\n  });\n\n  return function (_x4) {\n    return _ref5.apply(this, arguments);\n  };\n}();\n\nSound.createAsync = function () {\n  var _ref6 = _asyncToGenerator(function* (source) {\n    var initialStatus = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var onPlaybackStatusUpdate = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n    var downloadFirst = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;\n    var sound = new Sound();\n    sound.setOnPlaybackStatusUpdate(onPlaybackStatusUpdate);\n    var status = yield sound.loadAsync(source, initialStatus, downloadFirst);\n    return {\n      sound: sound,\n      status: status\n    };\n  });\n\n  return function (_x5) {\n    return _ref6.apply(this, arguments);\n  };\n}();\n\nObject.assign(Sound.prototype, PlaybackMixin);","map":{"version":3,"sources":["../../src/Audio/Sound.ts"],"names":[],"mappings":"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","sourcesContent":["import { EventEmitter, Platform, UnavailabilityError } from 'expo-modules-core';\n\nimport {\n  Playback,\n  PlaybackMixin,\n  AVPlaybackSource,\n  AVMetadata,\n  AVPlaybackStatus,\n  AVPlaybackStatusToSet,\n  assertStatusValuesInBounds,\n  getNativeSourceAndFullInitialStatusForLoadAsync,\n  getUnloadedStatus,\n  AVPlaybackTolerance,\n} from '../AV';\nimport { PitchCorrectionQuality } from '../Audio';\nimport ExponentAV from '../ExponentAV';\nimport { throwIfAudioIsDisabled } from './AudioAvailability';\n\n// @needsAudit\nexport type AudioChannel = {\n  /**\n   * All samples for this specific Audio Channel in PCM Buffer format (-1 to 1).\n   */\n  frames: number[];\n};\n\n// @needsAudit\n/**\n * Object passed to the `onAudioSampleReceived` function. Represents a single sample from an audio source.\n * The sample contains all frames (PCM Buffer values) for each channel of the audio, so if the audio is _stereo_ (interleaved),\n * there will be two channels, one for left and one for right audio.\n */\nexport type AudioSample = {\n  /**\n   * An array representing the data from each channel in PCM Buffer format. Array elements are objects in the following format: `{ frames: number[] }`,\n   * where each frame is a number in PCM Buffer format (`-1` to `1` range).\n   */\n  channels: AudioChannel[];\n  /**\n   * A number representing the timestamp of the current sample in seconds, relative to the audio track's timeline.\n   * > **Known issue:** When using the `ExoPlayer` Android implementation, the timestamp is always `-1`.\n   */\n  timestamp: number;\n};\n\n// @needsAudit\nexport type SoundObject = {\n  /**\n   * The newly created and loaded `Sound` object.\n   */\n  sound: Sound;\n  /**\n   * The `PlaybackStatus` of the `Sound` object. See the [AV documentation](/versions/latest/sdk/av) for further information.\n   */\n  status: AVPlaybackStatus;\n};\n\ntype AudioInstance = number | HTMLMediaElement | null;\ntype AudioSampleCallback = ((sample: AudioSample) => void) | null;\n\ndeclare global {\n  interface Global {\n    __EXAV_setOnAudioSampleReceivedCallback:\n      | ((key: number, callback: AudioSampleCallback) => void)\n      | undefined;\n  }\n}\n\n// @needsAudit\n/**\n * This class represents a sound corresponding to an Asset or URL.\n * @return A newly constructed instance of `Audio.Sound`.\n *\n * @example\n * ```ts\n * const sound = new Audio.Sound();\n * try {\n *   await sound.loadAsync(require('./assets/sounds/hello.mp3'));\n *   await sound.playAsync();\n *   // Your sound is playing!\n *\n *   // Don't forget to unload the sound from memory\n *   // when you are done using the Sound object\n *   await sound.unloadAsync();\n * } catch (error) {\n *   // An error occurred!\n * }\n * ```\n *\n * > Method not described below and the rest of the API for `Audio.Sound` is the same as the imperative playback API for `Video`.\n * > See the [AV documentation](/versions/latest/sdk/av) for further information.\n */\nexport class Sound implements Playback {\n  _loaded: boolean = false;\n  _loading: boolean = false;\n  _key: AudioInstance = null;\n  _lastStatusUpdate: string | null = null;\n  _lastStatusUpdateTime: Date | null = null;\n  _subscriptions: { remove: () => void }[] = [];\n  _eventEmitter: EventEmitter = new EventEmitter(ExponentAV);\n  _coalesceStatusUpdatesInMillis: number = 100;\n  _onPlaybackStatusUpdate: ((status: AVPlaybackStatus) => void) | null = null;\n  _onMetadataUpdate: ((metadata: AVMetadata) => void) | null = null;\n  _onAudioSampleReceived: AudioSampleCallback = null;\n\n  /** @deprecated Use `Sound.createAsync()` instead */\n  static create = async (\n    source: AVPlaybackSource,\n    initialStatus: AVPlaybackStatusToSet = {},\n    onPlaybackStatusUpdate: ((status: AVPlaybackStatus) => void) | null = null,\n    downloadFirst: boolean = true\n  ): Promise<SoundObject> => {\n    console.warn(\n      `Sound.create is deprecated in favor of Sound.createAsync with the same API except for the new method name`\n    );\n    return Sound.createAsync(source, initialStatus, onPlaybackStatusUpdate, downloadFirst);\n  };\n\n  /**\n   * Creates and loads a sound from source.\n   *\n   * ```ts\n   * const { sound } = await Audio.Sound.createAsync(\n   *   source,\n   *   initialStatus,\n   *   onPlaybackStatusUpdate,\n   *   downloadFirst\n   * );\n   *\n   * // Which is equivalent to the following:\n   * const sound = new Audio.Sound();\n   * sound.setOnPlaybackStatusUpdate(onPlaybackStatusUpdate);\n   * await sound.loadAsync(source, initialStatus, downloadFirst);\n   * ```\n   *\n   * @param source The source of the sound. See the [AV documentation](/versions/latest/sdk/av/#playback-api) for details on the possible `source` values.\n   *\n   * @param initialStatus The initial intended `PlaybackStatusToSet` of the sound, whose values will override the default initial playback status.\n   * This value defaults to `{}` if no parameter is passed. See the [AV documentation](/versions/latest/sdk/av) for details on `PlaybackStatusToSet` and the default\n   * initial playback status.\n   *\n   * @param onPlaybackStatusUpdate A function taking a single parameter `PlaybackStatus`. This value defaults to `null` if no parameter is passed.\n   * See the [AV documentation](/versions/latest/sdk/av) for details on the functionality provided by `onPlaybackStatusUpdate`\n   *\n   * @param downloadFirst If set to true, the system will attempt to download the resource to the device before loading. This value defaults to `true`.\n   * Note that at the moment, this will only work for `source`s of the form `require('path/to/file')` or `Asset` objects.\n   *\n   * @example\n   * ```ts\n   * try {\n   *   const { sound: soundObject, status } = await Audio.Sound.createAsync(\n   *     require('./assets/sounds/hello.mp3'),\n   *     { shouldPlay: true }\n   *   );\n   *   // Your sound is playing!\n   * } catch (error) {\n   *   // An error occurred!\n   * }\n   * ```\n   *\n   * @return A `Promise` that is rejected if creation failed, or fulfilled with the `SoundObject` if creation succeeded.\n   */\n  static createAsync = async (\n    source: AVPlaybackSource,\n    initialStatus: AVPlaybackStatusToSet = {},\n    onPlaybackStatusUpdate: ((status: AVPlaybackStatus) => void) | null = null,\n    downloadFirst: boolean = true\n  ): Promise<SoundObject> => {\n    const sound: Sound = new Sound();\n    sound.setOnPlaybackStatusUpdate(onPlaybackStatusUpdate);\n    const status: AVPlaybackStatus = await sound.loadAsync(source, initialStatus, downloadFirst);\n    return { sound, status };\n  };\n\n  // Internal methods\n\n  _callOnPlaybackStatusUpdateForNewStatus(status: AVPlaybackStatus) {\n    const shouldDismissBasedOnCoalescing =\n      this._lastStatusUpdateTime &&\n      JSON.stringify(status) === this._lastStatusUpdate &&\n      Date.now() - this._lastStatusUpdateTime.getTime() < this._coalesceStatusUpdatesInMillis;\n\n    if (this._onPlaybackStatusUpdate != null && !shouldDismissBasedOnCoalescing) {\n      this._onPlaybackStatusUpdate(status);\n      this._lastStatusUpdateTime = new Date();\n      this._lastStatusUpdate = JSON.stringify(status);\n    }\n  }\n\n  async _performOperationAndHandleStatusAsync(\n    operation: () => Promise<AVPlaybackStatus>\n  ): Promise<AVPlaybackStatus> {\n    throwIfAudioIsDisabled();\n    if (this._loaded) {\n      const status = await operation();\n      this._callOnPlaybackStatusUpdateForNewStatus(status);\n      return status;\n    } else {\n      throw new Error('Cannot complete operation because sound is not loaded.');\n    }\n  }\n\n  private _updateAudioSampleReceivedCallback() {\n    if (global.__EXAV_setOnAudioSampleReceivedCallback == null) {\n      if (Platform.OS === 'ios' || Platform.OS === 'android') {\n        console.warn(\n          'expo-av: Failed to set up Audio Sample Buffer callback. ' +\n            \"Do you have 'Remote Debugging' enabled in your app's Developer Menu (https://docs.expo.dev/workflow/debugging)? \" +\n            'Audio Sample Buffer callbacks are not supported while using Remote Debugging, you will need to disable it to use them.'\n        );\n        return;\n      } else {\n        throw new UnavailabilityError('expo-av', 'setOnAudioSampleReceived');\n      }\n    }\n    if (this._key == null) {\n      throw new Error(\n        'Cannot set Audio Sample Buffer callback when the Sound instance has not been successfully loaded/initialized!'\n      );\n    }\n    if (typeof this._key !== 'number') {\n      throw new Error(\n        `Cannot set Audio Sample Buffer callback when Sound instance key is of type ${typeof this\n          ._key}! (expected: number)`\n      );\n    }\n\n    global.__EXAV_setOnAudioSampleReceivedCallback(this._key, this._onAudioSampleReceived);\n  }\n\n  _internalStatusUpdateCallback = ({\n    key,\n    status,\n  }: {\n    key: AudioInstance;\n    status: AVPlaybackStatus;\n  }) => {\n    if (this._key === key) {\n      this._callOnPlaybackStatusUpdateForNewStatus(status);\n    }\n  };\n\n  _internalMetadataUpdateCallback = ({\n    key,\n    metadata,\n  }: {\n    key: AudioInstance;\n    metadata: AVMetadata;\n  }) => {\n    if (this._key === key) {\n      this._onMetadataUpdate?.(metadata);\n    }\n  };\n\n  _internalErrorCallback = ({ key, error }: { key: AudioInstance; error: string }) => {\n    if (this._key === key) {\n      this._errorCallback(error);\n    }\n  };\n\n  // TODO: We can optimize by only using time observer on native if (this._onPlaybackStatusUpdate).\n  _subscribeToNativeEvents() {\n    if (this._loaded) {\n      this._subscriptions.push(\n        this._eventEmitter.addListener(\n          'didUpdatePlaybackStatus',\n          this._internalStatusUpdateCallback\n        ),\n        this._eventEmitter.addListener('didUpdateMetadata', this._internalMetadataUpdateCallback)\n      );\n\n      this._subscriptions.push(\n        this._eventEmitter.addListener('ExponentAV.onError', this._internalErrorCallback)\n      );\n    }\n  }\n\n  _clearSubscriptions() {\n    this._subscriptions.forEach((e) => e.remove());\n    this._subscriptions = [];\n  }\n\n  _errorCallback = (error: string) => {\n    this._clearSubscriptions();\n    this._loaded = false;\n    this._key = null;\n    this._callOnPlaybackStatusUpdateForNewStatus(getUnloadedStatus(error));\n  };\n\n  // ### Unified playback API ### (consistent with Video.js)\n  // All calls automatically call onPlaybackStatusUpdate as a side effect.\n\n  // Get status API\n\n  getStatusAsync = async (): Promise<AVPlaybackStatus> => {\n    if (this._loaded) {\n      return this._performOperationAndHandleStatusAsync(() =>\n        ExponentAV.getStatusForSound(this._key)\n      );\n    }\n    const status: AVPlaybackStatus = getUnloadedStatus();\n    this._callOnPlaybackStatusUpdateForNewStatus(status);\n    return status;\n  };\n\n  /**\n   * Sets a function to be called regularly with the `AVPlaybackStatus` of the playback object.\n   *\n   * `onPlaybackStatusUpdate` will be called whenever a call to the API for this playback object completes\n   * (such as `setStatusAsync()`, `getStatusAsync()`, or `unloadAsync()`), nd will also be called at regular intervals\n   * while the media is in the loaded state.\n   *\n   * Set `progressUpdateIntervalMillis` via `setStatusAsync()` or `setProgressUpdateIntervalAsync()` to modify\n   * the interval with which `onPlaybackStatusUpdate` is called while loaded.\n   *\n   * @param onPlaybackStatusUpdate A function taking a single parameter `AVPlaybackStatus`.\n   */\n  setOnPlaybackStatusUpdate(onPlaybackStatusUpdate: ((status: AVPlaybackStatus) => void) | null) {\n    this._onPlaybackStatusUpdate = onPlaybackStatusUpdate;\n    this.getStatusAsync();\n  }\n\n  /**\n   * Sets a function to be called whenever the metadata of the sound object changes, if one is set.\n   * @param onMetadataUpdate A function taking a single object of type `AVMetadata` as a parameter.\n   * @platform ios\n   */\n  setOnMetadataUpdate(onMetadataUpdate: (metadata: AVMetadata) => void) {\n    this._onMetadataUpdate = onMetadataUpdate;\n  }\n\n  /**\n   * Sets a function to be called during playback, receiving the audio sample as parameter.\n   * @param callback A function taking the `AudioSampleCallback` as parameter.\n   */\n  setOnAudioSampleReceived(callback: AudioSampleCallback) {\n    this._onAudioSampleReceived = callback;\n    if (this._key != null) {\n      this._updateAudioSampleReceivedCallback();\n    }\n  }\n\n  // Loading / unloading API\n\n  async loadAsync(\n    source: AVPlaybackSource,\n    initialStatus: AVPlaybackStatusToSet = {},\n    downloadFirst: boolean = true\n  ): Promise<AVPlaybackStatus> {\n    throwIfAudioIsDisabled();\n    if (this._loading) {\n      throw new Error('The Sound is already loading.');\n    }\n    if (!this._loaded) {\n      this._loading = true;\n\n      const { nativeSource, fullInitialStatus } =\n        await getNativeSourceAndFullInitialStatusForLoadAsync(source, initialStatus, downloadFirst);\n\n      // This is a workaround, since using load with resolve / reject seems to not work.\n      return new Promise<AVPlaybackStatus>((resolve, reject) => {\n        const loadSuccess = (result: [AudioInstance, AVPlaybackStatus]) => {\n          const [key, status] = result;\n          this._key = key;\n          this._loaded = true;\n          this._loading = false;\n          this._subscribeToNativeEvents();\n          this._callOnPlaybackStatusUpdateForNewStatus(status);\n          resolve(status);\n        };\n\n        const loadError = (error: Error) => {\n          this._loading = false;\n          reject(error);\n        };\n\n        ExponentAV.loadForSound(nativeSource, fullInitialStatus).then(loadSuccess).catch(loadError);\n      });\n    } else {\n      throw new Error('The Sound is already loaded.');\n    }\n  }\n\n  async unloadAsync(): Promise<AVPlaybackStatus> {\n    if (this._loaded) {\n      this._loaded = false;\n      const key = this._key;\n      this._key = null;\n      const status = await ExponentAV.unloadForSound(key);\n      this._callOnPlaybackStatusUpdateForNewStatus(status);\n      this._clearSubscriptions();\n      return status;\n    } else {\n      return this.getStatusAsync(); // Automatically calls onPlaybackStatusUpdate.\n    }\n  }\n\n  // Set status API (only available while isLoaded = true)\n\n  async setStatusAsync(status: AVPlaybackStatusToSet): Promise<AVPlaybackStatus> {\n    assertStatusValuesInBounds(status);\n    return this._performOperationAndHandleStatusAsync(() =>\n      ExponentAV.setStatusForSound(this._key, status)\n    );\n  }\n\n  async replayAsync(status: AVPlaybackStatusToSet = {}): Promise<AVPlaybackStatus> {\n    if (status.positionMillis && status.positionMillis !== 0) {\n      throw new Error('Requested position after replay has to be 0.');\n    }\n\n    return this._performOperationAndHandleStatusAsync(() =>\n      ExponentAV.replaySound(this._key, {\n        ...status,\n        positionMillis: 0,\n        shouldPlay: true,\n      })\n    );\n  }\n\n  // Methods of the Playback interface that are set via PlaybackMixin\n  playAsync!: () => Promise<AVPlaybackStatus>;\n  playFromPositionAsync!: (\n    positionMillis: number,\n    tolerances?: AVPlaybackTolerance\n  ) => Promise<AVPlaybackStatus>;\n  pauseAsync!: () => Promise<AVPlaybackStatus>;\n  stopAsync!: () => Promise<AVPlaybackStatus>;\n  setPositionAsync!: (\n    positionMillis: number,\n    tolerances?: AVPlaybackTolerance\n  ) => Promise<AVPlaybackStatus>;\n  setRateAsync!: (\n    rate: number,\n    shouldCorrectPitch: boolean,\n    pitchCorrectionQuality?: PitchCorrectionQuality\n  ) => Promise<AVPlaybackStatus>;\n  setVolumeAsync!: (volume: number) => Promise<AVPlaybackStatus>;\n  setIsMutedAsync!: (isMuted: boolean) => Promise<AVPlaybackStatus>;\n  setIsLoopingAsync!: (isLooping: boolean) => Promise<AVPlaybackStatus>;\n  setProgressUpdateIntervalAsync!: (\n    progressUpdateIntervalMillis: number\n  ) => Promise<AVPlaybackStatus>;\n}\n\nObject.assign(Sound.prototype, PlaybackMixin);\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}